# -*- coding: utf-8 -*-
"""kmeans&medoids.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12r3J5jz2ljnH5uEtgfGAbr_34cgifIFv
"""

pip install scikit-learn-extra

import matplotlib.pyplot as plt
import pandas as pd 
import numpy as np
import seaborn as sns
from sklearn import metrics
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn_extra.cluster import KMedoids
from sklearn.preprocessing import MinMaxScaler

ef1 = pd.read_csv('/content/sample_data/Country-data.csv')

ef1.head()

ef1.size

ef1.isnull().sum()

n = len(pd.unique(ef1['country']))
  
print("No.of unique values :", 
      n)

ef3 = ef1.drop(['country'],axis=1)

ef3.head()

def scale_data():
  scaler=MinMaxScaler()
  for x in ef3.columns[0:9]:
    scaler.fit(np.array(ef3[x]).reshape(-1,1))
    ef3[x]=scaler.transform(np.array(ef3[x]).reshape(-1,1))
    ef3[x].round(2)
scale_data()

ef3.head()

#converting the 9 dimentional data to 2 dimensinal data using pca
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(ef3)
cf_after_pca = pd.DataFrame(data = principalComponents , columns = ['x', 'y'])
pca_medoid=pd.DataFrame(cf_after_pca)

kmeans = KMeans(n_clusters = 3,random_state=111)
kmeans.fit(cf_after_pca)

pd.Series(kmeans.labels_).value_counts()

metrics.silhouette_score(cf_after_pca, kmeans.labels_)

#cluster_labels = kmeans.fit_predict(ef3)

preds = kmeans.labels_
ef3 = pd.DataFrame(ef1)
data_after_pca_clus=pd.DataFrame(cf_after_pca)
ef3['KMeans_Clusters'] = preds
data_after_pca_clus['KMeans_clusters']=preds
ef3.head(10)
data_after_pca_clus.head()

#ef3.to_csv('kmeans_result.csv',index=False)

sns.scatterplot(data_after_pca_clus['x'],data_after_pca_clus['y'],hue='KMeans_clusters',data=data_after_pca_clus) 
plt.title("KMeans_clusters", fontsize=12)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()

under_developing= ef1[ef3['KMeans_Clusters']==2]['country']
developing=ef1[ef3['KMeans_Clusters']==0]['country']
developed=ef1[ef3['KMeans_Clusters']==1]['country']

print("Number of deveoped countries",len(under_developing))
print("Number of developing countries",len(developing))
print("Number of under-developing countries",len(developed))

list(developed)

list(developing)

list(under_developing)

kmedoids = KMedoids(n_clusters = 3,)
kmedoids.fit(pca_medoid)

pd.Series(kmedoids.labels_).value_counts()

metrics.silhouette_score(pca_medoid, kmedoids.labels_)

preds1 = kmedoids.labels_
kmedoid_cl = pd.DataFrame(ef1)
cf_after_pca_cl = pd.DataFrame(pca_medoid)
kmedoid_cl['KMedoids_Clusters'] = preds1
cf_after_pca_cl['KMedoid_Clusters'] = preds1
cf_after_pca_cl.head()

sns.scatterplot(cf_after_pca_cl['x'],cf_after_pca_cl['y'],hue='KMedoid_Clusters',data=cf_after_pca_cl) 
plt.title("x vs y", fontsize=12)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()

under_developing= kmedoid_cl[kmedoid_cl['KMedoids_Clusters']==1]['country']
developing=kmedoid_cl[kmedoid_cl['KMedoids_Clusters']==0]['country']
developed=kmedoid_cl[kmedoid_cl['KMedoids_Clusters']==2]['country']

print("Number of deveoped countries",len(under_developing))
print("Number of developing countries",len(developing))
print("Number of under-developing countries",len(developed))

list(developed)

list(developing)

list(under_developing)